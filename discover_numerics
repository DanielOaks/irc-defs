#!/usr/bin/env python3
# numerics discovery for irc-defs files
# Written by Daniel Oaks <daniel@danieloaks.net>, under CC0 license
"""discover_numerics - Feed this a numerics.h file or something similar, and
this will discover which numerics exist in that file but do not exist in our
numerics list.

Usage:
    discover_numerics search <numeric.h>... [--yaml <datafile>]
    discover_numerics search-dir <directory> [--yaml <datafile>]
    discover_numerics (-h | --help)

Options:
    --yaml <datafile>  Path to the numerics.yaml file [default: _data/numerics.yaml].
"""
__version__ = '0.0.1'

import glob
import re
import yaml
from docopt import docopt

RE_IRC2_INSP_NUMERIC_H = re.compile(r'^\s*(?P<name>(?:ERR_|RPL_)[0-9A-Z_]+)\s+=\s+(?P<numeric>[0-9]+)')
RE_CHARY_NUMERIC_H = re.compile(r'^#define\s+(?P<name>(?:ERR_|RPL_)[0-9A-Z_]+)\s+(?P<numeric>[0-9]+)')
RE_INSP_NUMERIC_ALONE = re.compile(r'(?P<name>)Write(?:Remote)?Numeric\((?P<numeric>[0-9]+)[^0-9]')

if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)

    files = []
    if arguments['search']:
        files = arguments['<numeric.h>']
    elif arguments['search-dir']:
        for ext in [ 'c', 'cpp', 'h', 'hpp' ]:
            files += glob.glob("{base}/**/*.{ext}".format(base=arguments['<directory>'], ext=ext), recursive=True)

    if files:
        data = yaml.load(open(arguments['--yaml'], 'r').read())

        for numerics_filename in files:
            lines = None
            try:
                lines = open(numerics_filename, 'r').read().split('\n')
            except UnicodeDecodeError:
                # skip binary files
                continue

            for line in lines:
                matches = RE_IRC2_INSP_NUMERIC_H.findall(line) + RE_CHARY_NUMERIC_H.findall(line) + RE_INSP_NUMERIC_ALONE.findall(line)
                for match in matches:
                    name, numeric = match
                    numeric = numeric.zfill(3)

                    found = False

                    for val in data['values']:
                        if name:
                            if val['name'] == name and val['numeric'] == numeric:
                                found = True
                            elif val['numeric'] == numeric and name in val.get('comment', ''):
                                found = True
                        else:
                            # if there's no name we can only check by numeric, dodgy but it's all we can do.
                            if val['numeric'] == numeric:
                                found = True
                                name = "None supplied"

                    if not found:
                        print('Could not find numeric: {name} ({numeric}): {file}'.format(name=name, numeric=numeric, file=numerics_filename))
